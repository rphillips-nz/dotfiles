# Autoload zsh add-zsh-hook and vcs_info functions (-U autoload w/o substition, -z use zsh style)
autoload -Uz add-zsh-hook vcs_info

# Enable substitution in prompt
setopt prompt_subst

# Run vcs_info just before a prompt is displayed (precmd)
add-zsh-hook precmd vcs_info

# Create the prompt including ${vcs_info_msg_0}
local newline=$'\n'
PROMPT='%F{green}%~${vcs_info_msg_0_}${newline}%F{8}%(!.#.▶) %f'
PS2='%F{8}↳ %f'

# Turn on (un)staged changes checks (enables %u and %c in formats below)
zstyle ':vcs_info:*' check-for-changes true

# Change format for (un)staged repo changes
zstyle ':vcs_info:*' unstagedstr '%F{yellow}●%f'
zstyle ':vcs_info:*' stagedstr '%F{green}●%f'

# Format git info from vcs_info
zstyle ':vcs_info:git:*' formats       ' %F{8}on %F{blue}%b%m %u%c%f'
zstyle ':vcs_info:git:*' actionformats ' %F{8}on %F{blue}%b|%a%m %u%c%f'

# Set extra hooks to run
zstyle ':vcs_info:git*+set-message:*' hooks git-st git-untracked

# Hooks adapted from https://github.com/zsh-users/zsh/blob/master/Misc/vcs_info-examples
function +vi-git-st() {
	local -a gitstatus
	local ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l | tr -d ' ')
	(( $ahead )) && gitstatus+=( " ⇡${ahead}" )
	local behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l | tr -d ' ')
	(( $behind )) && gitstatus+=( " ⇣${behind}" )
	hook_com[misc]+=${(j::)gitstatus}
}

+vi-git-untracked(){
	if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
		git status --porcelain | grep '??' &> /dev/null ; then
		hook_com[staged]+='%F{red}●%f'
	fi
}
