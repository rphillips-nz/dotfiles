#!/bin/zsh

fetch=1
pull=1
rebase=1

print_usage() {
	printf "Usage
  $ giiit [options]

Options
  -f fetch each repo
  -p pull each repo
  -r pull rebase each repo\n"
}

while getopts 'fpr' flag; do
  case "${flag}" in
    f) fetch=0 ;;
    p) pull=0 ;;
    r) rebase=0 ;;
    *) print_usage
       exit 1 ;;
  esac
done

function git_has_staged() {
	[[ $(git diff --name-only --cached | wc -l) -ne 0 ]]
}

function git_has_unstaged() {
	[[ $(git diff --name-only | wc -l) -ne 0 ]]
}

function git_has_untracked() {
	[[ $(git status --porcelain | grep '^??' | wc -l) -ne 0 ]]
}

function git_has_changes() {
	[[ $(git status --porcelain | wc -l) -ne 0 ]]
}

function git_ahead() {
	git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l | tr -d ' '
}

function git_behind() {
	git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l | tr -d ' '
}

function git_branch() {
	git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1/"
}

changed=()
repo_count=0

pushd .

for repo in $(find . -depth 2 -type d -name ".git")
do
	dir=$(echo $repo | sed -e 's/\/.git/\//' | sed s'/.$//' | sed s'/^\.\///')
	cd $dir

	[[ $fetch -eq 0 ]] && git fetch

	if [[ $pull -eq 0 || $rebase -eq 0 ]]; then
		if $(git_has_changes); then
			echo "\e[0;31m$dir unable to pull due to changes\e[0m"
		else
			if [[ $rebase -eq 0 ]]; then
				git pull --rebase
			elif [[ $pull -eq 0 ]]; then
				git pull
			fi
		fi
	fi

	local position=""
	local lights=""
	local ahead=$(git_ahead)
	local behind=$(git_behind)

	[[ $ahead -eq 0 ]] || position+=" \e[0;34m⇡$ahead\e[0m"
	[[ $behind -eq 0 ]] || position+=" \e[0;34m⇣$behind\e[0m"

	$(git_has_unstaged) && lights+="\e[0;33m●\e[0m"
	$(git_has_staged) && lights+="\e[0;32m●\e[0m"
	$(git_has_untracked) && lights+="\e[0;31m●\e[0m"

	summary="$dir \e[0;90mon\e[0m \e[0;34m$(git_branch)\e[0m $position $lights"

	echo $summary | tr -s ' '

	cd - &> /dev/null
done

popd
